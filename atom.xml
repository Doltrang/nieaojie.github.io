<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nieaojie.github.io</id>
    <title>Dudd_的博客</title>
    <updated>2021-03-26T12:34:25.694Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nieaojie.github.io"/>
    <link rel="self" href="https://nieaojie.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://nieaojie.github.io/images/avatar.png</logo>
    <icon>https://nieaojie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Dudd_的博客</rights>
    <entry>
        <title type="html"><![CDATA[高质量的Java面试总结]]></title>
        <id>https://nieaojie.github.io/post/18e4kdY6o/</id>
        <link href="https://nieaojie.github.io/post/18e4kdY6o/">
        </link>
        <updated>2021-03-26T08:23:36.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.52pojie.cn/thread-1392223-1-1.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于SpringBoot日期返回值类型转化的问题]]></title>
        <id>https://nieaojie.github.io/post/aHzrN8krk/</id>
        <link href="https://nieaojie.github.io/post/aHzrN8krk/">
        </link>
        <updated>2021-03-22T14:08:16.000Z</updated>
        <content type="html"><![CDATA[<p>参考资料：</p>
<p>https://blog.csdn.net/weixin_44906271/article/details/105772304</p>
<ol>
<li>返回实体类时<br>
在对应实体类的时间字段上面加上如下注解，那么返回的时间格式就自动转换成了需要的格式了。</li>
</ol>
<pre><code class="language-java">import com.fasterxml.jackson.annotation.JsonFormat;
...
    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)
    private LocalDateTime createTime;
</code></pre>
<p>注意：这种方式可能在返回时，时间不正确，可以尝试加上timezone=“GMT+8”</p>
<pre><code class="language-java">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)
</code></pre>
<p>同时可以在配置文件中设置全局配置，这样不用在每个实体类时间字段上都加上注解了，properties配置如下：</p>
<pre><code class="language-java">//时间类型会直接返回格式时间
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Asia/Shanghai
</code></pre>
<p>返回MAP时，在sql语句里面可以使用 DATE_FORMAT函数直接把时间格式转换：</p>
<pre><code class="language-java">SELECT DATE_FORMAT( b.book_start_time,'%Y-%m-%d %H:%i:%s') book_start_time
</code></pre>
<p>这时返回的时间格式就可以直接用了</p>
<pre><code class="language-java">&quot;book_start_time&quot;: &quot;2020-02-20 10:16:00&quot;,
&quot;book_status&quot;: 0,
&quot;parking_lot_address&quot;: &quot;xx区&quot;,
&quot;id&quot;: 27,
&quot;book_parkinglot&quot;: &quot;xxx停车场&quot;,
&quot;book_end_time&quot;: &quot;2020-02-21 10:16:00&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java Lambda 表达式]]></title>
        <id>https://nieaojie.github.io/post/WP3gsNVpY/</id>
        <link href="https://nieaojie.github.io/post/WP3gsNVpY/">
        </link>
        <updated>2021-03-02T06:38:58.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>参考：http://blog.oneapm.com/apm-tech/226.html</p>
</blockquote>
<p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p>
<p>Lambda 允许<mark>把函数作为一个方法的参数（函数作为参数传递进方法中）</mark>。</p>
<p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p>
<h2 id="匿名内部类的方式">匿名内部类的方式</h2>
<p>匿名内部类的格式：</p>
<pre><code class="language-java">new 父类或接口() {
    重写的方法; 
}
</code></pre>
<p><strong>在匿名内部类中，有很多内容都是冗余的。</strong></p>
<p>比如在使用匿名内部类实现多线程的代码中。</p>
<ul>
<li>因为 Thread 构造方法中需要传递 Runnable 接口类型的参数，所以我们不得不 new Runnable。</li>
<li>因为要重写 Runnable 中的 run 方法，所以不得不写了public void run。</li>
</ul>
<p>整个匿名内部类中最关键的东西是方法，方法中最关键的有前中后三点。</p>
<ul>
<li>前：参数。</li>
<li>中：方法体</li>
<li>后：返回值</li>
</ul>
<p>最好的情况是只关注匿名内部类中最核心的这些内容==（方法参数，方法体，返回值）==如果使用Lambda表达式，可以只关注最核心的内容，Lambda 表达式是匿名内部类的简化写法。</p>
<h2 id="lambda-属于函数式编程思想">Lambda 属于函数式编程思想</h2>
<h3 id="概念">概念</h3>
<p>函数式编程：<mark>可推导，就是可省略</mark>。</p>
<p>例如在 Thread 构造方法中需要 Runnable 类型的参数，所以可以省略 new Runnable。</p>
<p>在 Runnable 中的只有一个抽象方法 run，所以重写的必然是这个 run 方法，所以可以省略 run 方法的声明部分（public void run）。</p>
<ul>
<li>面向对象思想：怎么做。</li>
<li>函数式编程思想：做什么。</li>
</ul>
<h3 id="语法">语法</h3>
<p>Lambda 表达式的标准格式：</p>
<pre><code class="language-java">(参数类型 参数名) -&gt; {
    方法体;
    return 返回值;
}
</code></pre>
<p><strong>格式解释：</strong></p>
<ul>
<li>小括号中的参数和之前方法的参数写法一样，可以写任意个参数，如果多个参数，要使用逗号隔开。</li>
<li>-&gt; 是一个运算符，表示<mark>指向性动作</mark>。</li>
<li>大括号中的方法体以及 return 返回值的写法和之前方法的大括号中的写法一样。</li>
</ul>
<p><strong>省略规则：</strong></p>
<ul>
<li>小括号中的参数类型可以省略。</li>
<li>如果小括号中只有一个参数，那么可以省略小括号。</li>
<li>如果大括号中只有一条语句，那么可以省略大括号，return，分号。</li>
</ul>
<p><strong>Lambda 使用条件：</strong></p>
<ul>
<li>
<p><mark>必须有接口（不能是抽象类），接口中<strong>有且仅有一个</strong>需要被重写的抽象方法。</mark></p>
</li>
<li>
<p><mark>必须支持上下文推导，要能够推导出来 Lambda 表达式表示的是哪个接口中的内容。</mark></p>
<p>可以使用接口当做参数，然后传递 Lambda 表达式(常用)，也可以将 Lambda 表达式赋值给一个接口类型的变量。</p>
</li>
</ul>
<h3 id="示例">示例</h3>
<blockquote>
<p>示例1：使用匿名内部类和Lambda表达式的比较。</p>
</blockquote>
<pre><code class="language-java">public class Demo01Inner {
    public static void main(String[] args) {
        //使用匿名内部类的方式实现多线程。
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(Thread.currentThread().getName() + &quot;执行了&quot;);
            }
        }).start();

        //使用Lambda表达式实现多线程
        new Thread(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;执行了&quot;)).start();
    }
}
</code></pre>
<p>匿名内部类可以省去单独创建 <strong>.java</strong> 文件的操作。但是匿名内部类也是有缺点的，写法太冗余了，里面有很多多余的部分。</p>
<p>匿名内部类也有简化写法，匿名内部类的简化写法是 Lambda 表达式匿名内部类中最关键的内容是方法的参数，方法体，以及返回值，而在 Lambda 表达式中，关注的就是这三个关键的东西。</p>
<p>Lambda 表达式可以省略面向对象中的一些条条框框，让我们只关注最核心的内容。</p>
<blockquote>
<p>示例2：匿名内部类与 Lambda 函数比较。</p>
</blockquote>
<pre><code class="language-java">public class Demo03Collections {
    public static void main(String[] args) {
        //创建集合
        List&lt;Student&gt; list = new ArrayList&lt;&gt;();
        //添加元素
        list.add(new Student(&quot;嫐&quot;, 20));
        list.add(new Student(&quot;嬲&quot;, 18));
        list.add(new Student(&quot;挊&quot;, 22));
        //使用比较器排序对集合中的学生对象根据年龄升序排序
        //Collections.sort(list, new Rule());

        //使用匿名内部类
        Collections.sort(list, new Comparator&lt;Student&gt;() {
            @Override
            public int compare(Student o1, Student o2) {
                return o1.getAge() - o2.getAge();
            }
        });
       
        //使用Lambda表达式
        Collections.sort(list, (Student o1, Student o2) -&gt; {
            return o1.getAge() - o2.getAge();
        });

        Collections.sort(list, (o1, o2) -&gt; o1.getAge() - o2.getAge());

        System.out.println(list);

    }
}
</code></pre>
<blockquote>
<p>示例3：省略规则。</p>
</blockquote>
<pre><code class="language-java">public class Demo04SimpleLambda {
    //定义方法，使用接口当做参数
    public static void method(MyInterface m) {
        m.printStr(&quot;hello&quot;);
    }

    public static void main(String[] args) {
        //调用method方法，参数传递MyInterface实现类对象
        method(new MyInterface() {
            @Override
            public void printStr(String str) {
                System.out.println(str);
            }
        });
        //使用Lambda表达式的标准格式。
        method((String str) -&gt; {
            System.out.println(str);
        });

        //1. 小括号中的参数类型可以省略。
        method((str) -&gt; {
            System.out.println(str);
        });
        //2. 如果小括号中只有一个参数，那么可以省略小括号。
        method(str -&gt; {
            System.out.println(str);
        });
        //3. 如果大括号中只有一条语句，那么可以省略大括号，return，分号。
        method(str -&gt; System.out.println(str));
    }
}
</code></pre>
<hr>
<h2 id="函数式接口">函数式接口</h2>
<p>使用<code>@FunctionalInterface</code>标注的接口表明该接口是一个函数式接口。</p>
<pre><code class="language-java">@FunctionalInterface
public interface Consumer&lt;T&gt; {
</code></pre>
<blockquote>
<p>函数式接口定义好后，我们可以在 API 中使用它，同时利用 Lambda 表达式。例如：</p>
</blockquote>
<pre><code class="language-java">//定义一个函数式接口
@FunctionalInterface
public interface WorkerInterface {

   public void doSomeWork();

}


public class WorkerInterfaceTest {

public static void execute(WorkerInterface worker) {
    worker.doSomeWork();
}

public static void main(String [] args) {

    //invoke doSomeWork using Annonymous class
    execute(new WorkerInterface() {
        @Override
        public void doSomeWork() {
            System.out.println(&quot;Worker invoked using Anonymous class&quot;);
        }
    });

    //invoke doSomeWork using Lambda expression 
    execute( () -&gt; System.out.println(&quot;Worker invoked using Lambda expression&quot;) );
}

}
</code></pre>
<p>输出：</p>
<pre><code>Worker invoked using Anonymous class 
Worker invoked using Lambda expression
</code></pre>
<p>这上面的例子里，我们创建了自定义的函数式接口并与 Lambda 表达式一起使用。execute() 方法现在可以将 Lambda 表达式作为参数。</p>
<h2 id="双冒号操作符">双冒号(::)操作符</h2>
<p>使用 Java 8 全新的<mark>双冒号(::)操作符</mark>将一个常规方法转化为 Lambda 表达式：</p>
<pre><code class="language-java">List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);

//Old Way
for (Integer integer : list) {
    System.out.println(integer);
}

//New Way
list.forEach(n -&gt; System.out.println(n));

//double colon operator in Java 8
list.forEach(System.out::println);
</code></pre>
<h2 id="断言predicate函数式接口">断言(Predicate)函数式接口</h2>
<p>**例1：**在下面的例子中，我们使用断言(Predicate)函数式接口创建一个测试，并打印所有通过测试的元素，这样，你就可以使用 Lambda 表达式规定一些逻辑，并以此为基础有所作为：</p>
<pre><code class="language-java">import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;

public class Main {

public static void main(String [] a)  {

    List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);

    System.out.println(&quot;Print all numbers:&quot;);
    evaluate(list, (n)-&gt;true);

    System.out.println(&quot;Print no numbers:&quot;);
    evaluate(list, (n)-&gt;false);

    System.out.println(&quot;Print even numbers:&quot;);
    evaluate(list, (n)-&gt; n%2 == 0 );

    System.out.println(&quot;Print odd numbers:&quot;);
    evaluate(list, (n)-&gt; n%2 == 1 );

    System.out.println(&quot;Print numbers greater than 5:&quot;);
    evaluate(list, (n)-&gt; n &gt; 5 );

}

public static void evaluate(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate) {
    for(Integer n: list)  {
        if(predicate.test(n)) {
            System.out.println(n + &quot; &quot;);
        }
    }
}

}   
</code></pre>
<p>说明：<code>predicate.test(n)</code>是函数式接口<code>Predicate</code>的一个接口方法，n为其参数，<mark>相当于重写了test方法</mark>。</p>
<pre><code class="language-java">public interface Predicate&lt;T&gt; {
    /**
     * Evaluates this predicate on the given argument.
     *
     * @param t the input argument
     * @return {@code true} if the input argument matches the predicate,
     * otherwise {@code false}
     */
    boolean test(T t);
    
    //其他方法。。。
}
</code></pre>
<p>输出：</p>
<pre><code class="language-java">Print all numbers: 1 2 3 4 5 6 7 
Print no numbers: 
Print even numbers: 2 4 6 
Print odd numbers: 1 3 5 7 
Print numbers greater than 5: 6 7
</code></pre>
<p><strong>例2：</strong></p>
<pre><code class="language-java">@Configuration
public class MgMvcConfiguration implements WebMvcConfigurer {
    public MgMvcConfiguration() {
    }

    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {
        converters.removeIf((httpMessageConverter) -&gt; {
            return httpMessageConverter instanceof StringHttpMessageConverter;
        });
    }
}
</code></pre>
<pre><code class="language-java">default boolean removeIf(Predicate&lt;? super E&gt; filter) {
    Objects.requireNonNull(filter);
    boolean removed = false;
    final Iterator&lt;E&gt; each = iterator();
    while (each.hasNext()) {
        if (filter.test(each.next())) {
            each.remove();
            removed = true;
        }
    }
    return removed;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git]]></title>
        <id>https://nieaojie.github.io/post/RV1Vac9jp/</id>
        <link href="https://nieaojie.github.io/post/RV1Vac9jp/">
        </link>
        <updated>2021-02-24T09:27:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git学习">Git学习</h1>
<blockquote>
<p>首先需要了解一个概念：版本控制</p>
</blockquote>
<h2 id="版本控制">版本控制</h2>
<blockquote>
<p>什么是版本控制？</p>
</blockquote>
<p>版本控制是指对软件开发过程中各种程序代码、<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>及说明文档等文件变更的管理，是<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/3765602">软件配置管理</a>的核心思想之一。</p>
<p>版本控制最主要的功能就是追踪文件的变更。它将什么时候、什么人更改了文件的什么内容等信息忠实地了记录下来。每一次文件的改变，文件的版本号都将增加。除了记录版本变更外，版本控制的另一个重要功能是并行开发。<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/3448966">软件开发</a>往往是多人协同作业，版本控制可以有效地解决版本的同步以及不同开发者之间的开发通信问题，提高协同开发的效率。并行开发中最常见的不同版本软件的错误(Bug)修正问题也可以通过版本控制中分支与合并的方法有效地解决。</p>
<p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>简单说就是用于管理多人协同开发项目的技术。</p>
<blockquote>
<p>常见的版本控制工具</p>
</blockquote>
<p>主流的版本控制器有如下这些：</p>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong> ( Subversion )</li>
<li>CVS ( Concurrent Versions System )</li>
<li>VSS ( Micorosoft Visual SourceSafe )</li>
<li>TFS ( Team Foundation Server)</li>
<li>Visual Studio Online<br>
<img src="https://nieaojie.github.io/post-images/1614158933439.jpg" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[测试]]></title>
        <id>https://nieaojie.github.io/post/ce-shi/</id>
        <link href="https://nieaojie.github.io/post/ce-shi/">
        </link>
        <updated>2021-02-24T08:18:00.000Z</updated>
        <content type="html"><![CDATA[<p>测试<br>
1111111111111111</p>
<hr>
<p>title: '测试'<br>
date: 2021-02-24 16:18:00<br>
tags: []<br>
published: true<br>
hideInList: false<br>
feature:</p>
<h2 id="istop-false">isTop: false</h2>
]]></content>
    </entry>
</feed>